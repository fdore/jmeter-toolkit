// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code. Version 3.3.0.17906
//    <NameSpace>JMeter.Toolkit.Engine</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><EnableLazyLoading>False</EnableLazyLoading><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>False</EnableSummaryComment><VirtualProp>False</VirtualProp><IncludeSerializeMethod>True</IncludeSerializeMethod><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><CodeBaseTag>Net40</CodeBaseTag><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><GenerateXMLAttributes>True</GenerateXMLAttributes><AutomaticProperties>False</AutomaticProperties><GenerateShouldSerialize>True</GenerateShouldSerialize><DisableDebug>False</DisableDebug><PropNameSpecified>All</PropNameSpecified><CustomUsings></CustomUsings><ExcludeIncludedTypes>False</ExcludeIncludedTypes><EnableInitializeFields>True</EnableInitializeFields>
//  </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Xml.Serialization;
using System.ComponentModel;
using System.IO;
using System.Collections.Generic;

namespace JMeter.Toolkit.Engine.XSD
{
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.225")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(AnonymousType = true)]
    [XmlRoot(Namespace = "", IsNullable = false)]
    public partial class testResults
    {

        private List<testResultsHttpSample> httpSampleField;

        private string versionField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        private bool httpSampleFieldSpecified;

        private bool versionFieldSpecified;

        public testResults()
        {
            this.httpSampleField = new List<testResultsHttpSample>();
        }

        [XmlElement("httpSample", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public List<testResultsHttpSample> httpSample
        {
            get
            {
                return this.httpSampleField;
            }
            set
            {
                this.httpSampleField = value;
            }
        }

        [XmlAttribute()]
        public string version
        {
            get
            {
                return this.versionField;
            }
            set
            {
                this.versionField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(testResults));
                }
                return serializer;
            }
        }

        [XmlIgnore()]
        public bool httpSampleSpecified
        {
            get
            {
                return httpSampleFieldSpecified;
            }
            set
            {
                httpSampleFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool versionSpecified
        {
            get
            {
                return versionFieldSpecified;
            }
            set
            {
                versionFieldSpecified = value;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current testResults object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an testResults object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output testResults object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out testResults obj, out System.Exception exception)
        {
            exception = null;
            obj = default(testResults);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out testResults obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static testResults Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((testResults)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current testResults object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an testResults object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output testResults object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out testResults obj, out System.Exception exception)
        {
            exception = null;
            obj = default(testResults);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out testResults obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static testResults LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.225")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(AnonymousType = true)]
    public partial class testResultsHttpSample
    {

        private List<testResultsHttpSampleAssertionResult> assertionResultField;

        private double tField;

        private bool tFieldSpecified;

        private double ltField;

        private bool ltFieldSpecified;

        private double tsField;

        private bool tsFieldSpecified;

        private bool sField;

        private bool sFieldSpecified;

        private string lbField;

        private string rcField;

        private string rmField;

        private string tnField;

        private string dtField;

        private double byField;

        private bool byFieldSpecified;

        private int ngField;

        private bool ngFieldSpecified;

        private int naField;

        private bool naFieldSpecified;

        private string hnField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        private bool assertionResultFieldSpecified;

        private bool lbFieldSpecified;

        private bool rcFieldSpecified;

        private bool rmFieldSpecified;

        private bool tnFieldSpecified;

        private bool dtFieldSpecified;

        private bool hnFieldSpecified;

        public testResultsHttpSample()
        {
            this.assertionResultField = new List<testResultsHttpSampleAssertionResult>();
        }

        [XmlElement("assertionResult", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public List<testResultsHttpSampleAssertionResult> assertionResult
        {
            get
            {
                return this.assertionResultField;
            }
            set
            {
                this.assertionResultField = value;
            }
        }

        [XmlAttribute()]
        public double t
        {
            get
            {
                return this.tField;
            }
            set
            {
                this.tField = value;
            }
        }

        [XmlIgnore()]
        public bool tSpecified
        {
            get
            {
                return this.tFieldSpecified;
            }
            set
            {
                this.tFieldSpecified = value;
            }
        }

        [XmlAttribute()]
        public double lt
        {
            get
            {
                return this.ltField;
            }
            set
            {
                this.ltField = value;
            }
        }

        [XmlIgnore()]
        public bool ltSpecified
        {
            get
            {
                return this.ltFieldSpecified;
            }
            set
            {
                this.ltFieldSpecified = value;
            }
        }

        [XmlAttribute()]
        public double ts
        {
            get
            {
                return this.tsField;
            }
            set
            {
                this.tsField = value;
            }
        }

        [XmlIgnore()]
        public bool tsSpecified
        {
            get
            {
                return this.tsFieldSpecified;
            }
            set
            {
                this.tsFieldSpecified = value;
            }
        }

        [XmlAttribute()]
        public bool s
        {
            get
            {
                return this.sField;
            }
            set
            {
                this.sField = value;
            }
        }

        [XmlIgnore()]
        public bool sSpecified
        {
            get
            {
                return this.sFieldSpecified;
            }
            set
            {
                this.sFieldSpecified = value;
            }
        }

        [XmlAttribute()]
        public string lb
        {
            get
            {
                return this.lbField;
            }
            set
            {
                this.lbField = value;
            }
        }

        [XmlAttribute()]
        public string rc
        {
            get
            {
                return this.rcField;
            }
            set
            {
                this.rcField = value;
            }
        }

        [XmlAttribute()]
        public string rm
        {
            get
            {
                return this.rmField;
            }
            set
            {
                this.rmField = value;
            }
        }

        [XmlAttribute()]
        public string tn
        {
            get
            {
                return this.tnField;
            }
            set
            {
                this.tnField = value;
            }
        }

        [XmlAttribute()]
        public string dt
        {
            get
            {
                return this.dtField;
            }
            set
            {
                this.dtField = value;
            }
        }

        [XmlAttribute()]
        public double by
        {
            get
            {
                return this.byField;
            }
            set
            {
                this.byField = value;
            }
        }

        [XmlIgnore()]
        public bool bySpecified
        {
            get
            {
                return this.byFieldSpecified;
            }
            set
            {
                this.byFieldSpecified = value;
            }
        }

        [XmlAttribute()]
        public int ng
        {
            get
            {
                return this.ngField;
            }
            set
            {
                this.ngField = value;
            }
        }

        [XmlIgnore()]
        public bool ngSpecified
        {
            get
            {
                return this.ngFieldSpecified;
            }
            set
            {
                this.ngFieldSpecified = value;
            }
        }

        [XmlAttribute()]
        public int na
        {
            get
            {
                return this.naField;
            }
            set
            {
                this.naField = value;
            }
        }

        [XmlIgnore()]
        public bool naSpecified
        {
            get
            {
                return this.naFieldSpecified;
            }
            set
            {
                this.naFieldSpecified = value;
            }
        }

        [XmlAttribute()]
        public string hn
        {
            get
            {
                return this.hnField;
            }
            set
            {
                this.hnField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(testResultsHttpSample));
                }
                return serializer;
            }
        }

        [XmlIgnore()]
        public bool assertionResultSpecified
        {
            get
            {
                return assertionResultFieldSpecified;
            }
            set
            {
                assertionResultFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool lbSpecified
        {
            get
            {
                return lbFieldSpecified;
            }
            set
            {
                lbFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool rcSpecified
        {
            get
            {
                return rcFieldSpecified;
            }
            set
            {
                rcFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool rmSpecified
        {
            get
            {
                return rmFieldSpecified;
            }
            set
            {
                rmFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool tnSpecified
        {
            get
            {
                return tnFieldSpecified;
            }
            set
            {
                tnFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool dtSpecified
        {
            get
            {
                return dtFieldSpecified;
            }
            set
            {
                dtFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool hnSpecified
        {
            get
            {
                return hnFieldSpecified;
            }
            set
            {
                hnFieldSpecified = value;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current testResultsHttpSample object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an testResultsHttpSample object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output testResultsHttpSample object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out testResultsHttpSample obj, out System.Exception exception)
        {
            exception = null;
            obj = default(testResultsHttpSample);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out testResultsHttpSample obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static testResultsHttpSample Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((testResultsHttpSample)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current testResultsHttpSample object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an testResultsHttpSample object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output testResultsHttpSample object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out testResultsHttpSample obj, out System.Exception exception)
        {
            exception = null;
            obj = default(testResultsHttpSample);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out testResultsHttpSample obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static testResultsHttpSample LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.225")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(AnonymousType = true)]
    public partial class testResultsHttpSampleAssertionResult
    {

        private string nameField;

        private string failureField;

        private string errorField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        private bool nameFieldSpecified;

        private bool failureFieldSpecified;

        private bool errorFieldSpecified;

        [XmlElement(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }

        [XmlElement(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string failure
        {
            get
            {
                return this.failureField;
            }
            set
            {
                this.failureField = value;
            }
        }

        [XmlElement(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string error
        {
            get
            {
                return this.errorField;
            }
            set
            {
                this.errorField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(testResultsHttpSampleAssertionResult));
                }
                return serializer;
            }
        }

        [XmlIgnore()]
        public bool nameSpecified
        {
            get
            {
                return nameFieldSpecified;
            }
            set
            {
                nameFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool failureSpecified
        {
            get
            {
                return failureFieldSpecified;
            }
            set
            {
                failureFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool errorSpecified
        {
            get
            {
                return errorFieldSpecified;
            }
            set
            {
                errorFieldSpecified = value;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current testResultsHttpSampleAssertionResult object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an testResultsHttpSampleAssertionResult object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output testResultsHttpSampleAssertionResult object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out testResultsHttpSampleAssertionResult obj, out System.Exception exception)
        {
            exception = null;
            obj = default(testResultsHttpSampleAssertionResult);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out testResultsHttpSampleAssertionResult obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static testResultsHttpSampleAssertionResult Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((testResultsHttpSampleAssertionResult)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current testResultsHttpSampleAssertionResult object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an testResultsHttpSampleAssertionResult object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output testResultsHttpSampleAssertionResult object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out testResultsHttpSampleAssertionResult obj, out System.Exception exception)
        {
            exception = null;
            obj = default(testResultsHttpSampleAssertionResult);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out testResultsHttpSampleAssertionResult obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static testResultsHttpSampleAssertionResult LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.225")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(AnonymousType = true)]
    [XmlRoot(Namespace = "", IsNullable = false)]
    public partial class NewDataSet
    {

        private List<testResults> itemsField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        private bool itemsFieldSpecified;

        public NewDataSet()
        {
            this.itemsField = new List<testResults>();
        }

        [XmlElement("testResults")]
        public List<testResults> Items
        {
            get
            {
                return this.itemsField;
            }
            set
            {
                this.itemsField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(NewDataSet));
                }
                return serializer;
            }
        }

        [XmlIgnore()]
        public bool ItemsSpecified
        {
            get
            {
                return itemsFieldSpecified;
            }
            set
            {
                itemsFieldSpecified = value;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current NewDataSet object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an NewDataSet object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output NewDataSet object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out NewDataSet obj, out System.Exception exception)
        {
            exception = null;
            obj = default(NewDataSet);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out NewDataSet obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static NewDataSet Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((NewDataSet)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current NewDataSet object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an NewDataSet object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output NewDataSet object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out NewDataSet obj, out System.Exception exception)
        {
            exception = null;
            obj = default(NewDataSet);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out NewDataSet obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static NewDataSet LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
}
